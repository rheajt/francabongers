{"version":3,"sources":["utils/useWindowDimensions.ts","FlowerSketch.tsx","PoemContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","getRand","r","Math","floor","random","getColor","FlowerSketch","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","deets","setup","p5","canvasParentRef","createCanvas","parent","setInterval","length","splice","push","draw","background","forEach","e","x","y","h","c","green","color","fill","quad","makeLeaves","rect","makeStem","ellipse","makePetals","g","b","makeFace","makeFlower","poem","PoemContainer","line","setLine","console","log","className","onClick","sequence","wrapper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5aef745.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height,\n    };\n}\n\nexport default function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(\n        getWindowDimensions()\n    );\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []);\n\n    return windowDimensions;\n}\n","import Sketch from \"react-p5\";\nimport p5Types from \"p5\";\nimport useWindowDimensions from \"./utils/useWindowDimensions\";\n// import { useState } from \"react\";\n\nconst getRand = (r: number) => {\n    return Math.floor(Math.random() * r + 1);\n};\n\nconst getColor = () => {\n    // const colors = [\"red\", \"orange\", \"yellow\", \"blue\", \"indigo\", \"violet\"];\n\n    return [getRand(255), getRand(255), getRand(255)];\n\n    // return ;\n};\n\nexport const FlowerSketch = () => {\n    const { height, width } = useWindowDimensions();\n    let deets = [[width / 2, height - 200, 200, getColor()]];\n\n    const plantFlower = () => {\n        if (deets.length > 30) {\n            deets.splice(0, 1);\n        }\n\n        deets.push([getRand(width), getRand(height - 120), 120, getColor()]);\n    };\n\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\n        p5.createCanvas(width, height).parent(canvasParentRef);\n        setInterval(() => {\n            plantFlower();\n        }, 500);\n    };\n\n    const draw = (p5: p5Types) => {\n        p5.background(\"beige\");\n\n        // makeFlower(p5, [width / 2, 100, height - 100, \"purple\"]);\n        deets.forEach((e) => {\n            makeFlower(p5, e);\n        });\n    };\n\n    return (\n        <Sketch\n            setup={setup}\n            draw={draw}\n            // mouseMoved={(p5: p5Types) => console.log(p5.mouseX, p5.mouseY)}\n        />\n    );\n};\n\nfunction makeFlower(p5: p5Types, deets: any[]) {\n    const [x, y, h, c] = deets;\n    makeLeaves(p5, x, y, h);\n    makeStem(p5, x, y, h);\n    makeFace(p5, x, y, c);\n}\n\nfunction makeFace(p5: p5Types, x: number, y: number, c: number[]) {\n    makePetals(p5, x, y);\n\n    const [r, g, b] = c;\n\n    const color = p5.color(r, g, b);\n    p5.fill(color);\n    p5.ellipse(x, y, 65, 65);\n}\n\nfunction makePetals(p5: p5Types, x: number, y: number) {\n    const color = p5.color(\"gold\");\n    p5.fill(color);\n\n    p5.ellipse(x - 30, y, 30, 30); // left\n    p5.ellipse(x + 30, y, 30, 30); // right\n    p5.ellipse(x, y - 30, 30, 30); // bottom\n    p5.ellipse(x, y + 30, 30, 30); // top\n\n    p5.ellipse(x - 22, y - 22, 30, 30); // top left\n    p5.ellipse(x + 22, y - 22, 30, 30); // top right\n    p5.ellipse(x + 22, y + 22, 30, 30); // bottom right\n    p5.ellipse(x - 22, y + 22, 30, 30); // bottom left\n}\n\nfunction makeStem(p5: p5Types, x: number, y: number, h: number) {\n    const green = p5.color(\"green\");\n    p5.fill(green);\n    p5.rect(x - 5, y, 10, h);\n}\n\nfunction makeLeaves(p5: p5Types, x: number, y: number, h: number) {\n    const green = p5.color(\"green\");\n    p5.fill(green);\n    y += h;\n\n    p5.quad(x, y, x + 30, y - 30, x + 70, y - 50, x + 50, y - 10);\n    p5.quad(x, y, x - 30, y - 30, x - 70, y - 50, x - 50, y - 10);\n}\n","import { useState } from \"react\";\nimport TypeAnimation from \"react-type-animation\";\n\nconst poem = [\n    \"The Ballad of Franca Bongers\",\n    \"The hero of our song is a wonderful dutch girl\",\n    \"with a passion for plants, we soon will unfurl\",\n    \"a story so grand filled with many twists and turns\",\n    \"and her wonderful life is certainly earned.\",\n\n    \"First she was a student with a passion for plants\",\n    \"And she also met girls for lots of romance\",\n    \"Eventually becoming a doctor of vegetables\",\n    \"And traveled the world to see all the spectacles\",\n\n    \"Finally she made her way to Beijing\",\n    \"With Florine on her arm, it wasn't a thing\",\n    \"She met lots of friends, and partied, and prospered\",\n    \"Then along came a baby, and her heart was again conquered\",\n\n    \"Her family is beautiful, healthy, and wise\",\n    \"But her song isn't done, she continues to thrive\",\n    \"Soon she will leave China, and be free once again,\",\n    \"But wherever she goes I am forever her friend\",\n];\n\nexport const PoemContainer = () => {\n    const [line, setLine] = useState(0);\n\n    const next = () => {\n        if (line < poem.length - 1) {\n            setLine(line + 1);\n        }\n    };\n\n    const prev = () => {\n        if (line > 0) {\n            setLine(line - 1);\n        }\n    };\n\n    console.log(line);\n    return (\n        <div className=\"container\">\n            <div className=\"btn\" onClick={prev} />\n            <TypeAnimation sequence={[poem[line], 100]} wrapper=\"p\" />\n            <div className=\"btn\" onClick={next} />\n        </div>\n    );\n};\n","// import React from \"react\";\nimport { FlowerSketch } from \"./FlowerSketch\";\nimport { PoemContainer } from \"./PoemContainer\";\n\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <>\n            <FlowerSketch />\n\n            <PoemContainer />\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}